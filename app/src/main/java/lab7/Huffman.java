/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;

import java.util.PriorityQueue;
import java.util.HashMap;
import heap.Heap;

public class Huffman {
    public static void main(String[] args) {
        String text = "hello world";

        //create hashmap from text
        HashMap<Character, Integer> frequencies = new HashMap<>();
        for (char c : text.toCharArray()) {
            if (c != ' ') {     //check for spaces
                //if key c has no instances, returns 0 instead of 'null'
                frequencies.put(c, frequencies.getOrDefault(c,0) + 1);
            }    
        }

        //create priority queue (val = letter, priority = frequency) from hashmap
        /* When adding node, compare node a to node b to keep queue sorted
            if negative, a is less frequent than b, so the priority is lower and it goes first
            if positive, a is more frequent than b, so the priority is higher and it goes last
        */
        PriorityQueue<Node> forest = new PriorityQueue<>((a,b) -> a.frequency - b.frequency);
        for (char c : frequencies.keySet()) {
            forest.add(new Node(c, frequencies.get(c)));
        }

    /* =TO DO= */
    /* while forest has 2 or more nodes{
            get two lowest frequency nodes (left) and (right)  <---- use poll()?
        
        new Node : Character = null, frequency = left + right
        newNode.left = left;
        newNode.right = right;
        
        add newNode back to priorityQueue
        }

        Node root = newNode

    */
    while (forest.size() > 1) {
        Node left = forest.poll();  
        Node right = forest.poll();
    }
    Node newNode = new Node('\0', left.frequency + right.frequency);
    newNode.left = left;
    newNode.right = right;

    //add newNode back to priorityQueue
    forest.add(newNode);
    Node root = newNode;
    }


//PRINT FOR DEBUGGING
        printFrequencies(frequencies);
        System.out.println("\nForest as PQ:");
        Node node;
        while(!forest.isEmpty()){
            node = forest.poll();
            System.out.println(node.character + ":" + node.frequency);
        }
    }

    /* Helper method to print frequencyTable */
    public static void printFrequencies(HashMap map){
        System.out.println("\nFrequency Table:");
        System.out.println(map);
    }
}

class Node {
    char character;
    int frequency;
    Node left;
    Node right;

    //constructor for Nodes
    Node(char character, int frequency){
        this.character = character;
        this.frequency = frequency;
        left = null;
        right = null;
    }
}
